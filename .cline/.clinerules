# Cline プロジェクトルール

## プロジェクト固有のパターン

### 命名規則
- ファイル名: キャメルケース（例: `authClient.ts`）
- クラス名: パスカルケース（例: `AuthClient`）
- 関数名: キャメルケース（例: `generateAuthRequest`）
- 定数: 大文字スネークケース（例: `DEFAULT_SCOPE`）
- 変数: キャメルケース（例: `userProfile`）

### コードスタイル
- インデント: 2スペース
- 文字列: シングルクォート
- セミコロン: 必須
- 型定義: 明示的に記述

### ディレクトリ構造
- 機能ごとにディレクトリを分割
- テストファイルは実装ファイルと同じディレクトリに配置
- 共通ユーティリティは `utils` ディレクトリに配置

### 開発ワークフロー
- 機能実装前にテストを作成
- コミット前に `npm run check` を実行
- ドキュメントを随時更新

## プロジェクト固有の知識

### OpenID Connect
- 認証フローは Authorization Code Flow を基本とする
- JWTトークンは RS256 アルゴリズムを使用
- スコープは `openid profile email` を基本とする
- リフレッシュトークンの実装も検討

### セキュリティ考慮事項
- CSRF対策としてstate parameterを使用
- PKCE (Proof Key for Code Exchange) の実装
- トークンはHTTP Onlyクッキーで保存
- セッション管理にはセキュアな方法を採用

### テスト戦略
- 単体テスト: 各コンポーネントの機能テスト
- 統合テスト: クライアント・サーバー間の連携テスト
- E2Eテスト: 実際のユーザーフローをシミュレート

## ユーザー設定

### 開発環境
- Node.js: v23.6.1 (Voltaで管理)
- エディタ: VSCode推奨
- 拡張機能: ESLint, Prettier, TypeScript推奨

### 実行環境
- ローカル環境での実行を前提
- 開発サーバーはデフォルトで以下のポートを使用:
  - クライアント: 3000
  - サーバー: 4000

## 学習メモ

### 重要な実装パス
- 認証リクエスト生成 → 認可コード取得 → トークン交換 → ユーザー情報取得
- ユーザー登録 → ユーザー認証 → トークン生成 → ユーザー情報提供

### 注意点
- JWTの有効期限設定は適切に行う
- リダイレクトURIの検証は厳密に行う
- エラーハンドリングは詳細なメッセージを提供
- デバッグ情報は本番環境では表示しない
